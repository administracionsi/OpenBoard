#ifndef UBFOLDERSPECS_H
#define UBFOLDERSPECS_H

#include "gui/UBDockPaletteWidget.h"
#include "board/UBFeaturesController.h"
#include <QVBoxLayout>
#include "gui/UBFeaturesActionBar.h"
#include "gui/UBFeaturesWidget.h"


class UBFoldersPecs : public UBDockPaletteWidget
{
public:
    UBFoldersPecs(QWidget* parent=0, const char* name="UBFoldersPecs");
    ~UBFoldersPecs();

    bool visibleInMode(eUBDockPaletteWidgetMode mode)
        {
            return mode == eUBDockPaletteWidget_BOARD
                || mode == eUBDockPaletteWidget_DESKTOP;
        }
    static const char *objNamePathList;
    static const char *objNameFeatureList;

private:
    UBFeaturesController *controller;
    QVBoxLayout *layout;
    UBFeaturesListView *pathListView;
    UBFeaturesCentralWidget *centralWidget;
    UBFeaturesActionBar *mActionBar;


};


class UBFoldersPecsCentralWidget : public QWidget
{
  Q_OBJECT

public:
    enum StackElement{
        MainList = 0,
        FeaturePropertiesList,
        FeaturesWebView
    };

    enum AddWidget {
        NewFolderDialog = 0,
        ProgressBarWidget
    };

    enum AddWidgetState {
        NonModal = 0,
        Modal
    };

    UBFeaturesCentralWidget(QWidget *parent = 0);
    void setSliderPosition(int pValue) {mNavigator->setSliderPosition(pValue);}

    UBFeaturesListView *listView() {return mNavigator->listView();}
    void showElement(const UBFeature &feature, StackElement pView);
    void switchTo(StackElement pView);
    void setPropertiesPixmap(const QPixmap &pix);
    void setPropertiesThumbnail(const QPixmap &pix);
    StackElement currentView() const {return static_cast<StackElement>(mStackedWidget->currentIndex());}
    UBFeature getCurElementFromProperties();

    void setLockedExcludingAdditional(bool pLock);

    QStackedWidget *mStackedWidget;
    UBFeaturesNavigatorWidget *mNavigator;
    UBFeatureProperties *mFeatureProperties;
    UBFeaturesWebView *webView;

    QStackedWidget *mAdditionalDataContainer;

signals:
    void lockMainWidget(bool pLock);
    void createNewFolderSignal(QString pStr);
    void sendFileNameList(const QStringList lst);

//    progressbar widget related signals
    void maxFilesCountEvaluated(int pValue);
    void increaseStatusBarValue();
    void scanCategory(const QString &);
    void scanPath(const QString &);

public slots:
    void showAdditionalData(AddWidget pWidgetType, AddWidgetState pState = NonModal);

private slots:
    void createNewFolderSlot(QString pStr);
    void hideAdditionalData();

    void scanStarted();
    void scanFinished();
};

#endif // UBFOLDERSPECS_H
